package uo.ri.cws.domain;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * To better understand this tests, please review the WorkOrder state diagram
 * see the "project scope statement" document
 * 
 * Scenarios:
 * - A FINISHED work order can be reopened
 * - An OPEN work order cannot be reopened, throws ISE
 * - An ASSIGNED work order cannot be reopened, throws ISE
 * - An invoiced work order cannot be reopened, throws ISE
 */
class WorkOrderReopenTests {
	
	private Vehicle vehicle;
	private Mechanic mechanic;

	@BeforeEach
	void setUp() {
		vehicle = new Vehicle("1234 GJI", "ibiza", "seat");
		mechanic = new Mechanic("nif-mecanico", "nombre", "apellidos");
	}

	/**
     * GIVEN: A work order in state FINISHED 
     * WHEN: reopening it 
     * THEN: the work order state is OPEN
     */
    @Test
    void testReopenFinishedWorkOrder() {
        WorkOrder wo = new WorkOrder(vehicle);
        wo.assignTo(mechanic);
        wo.markAsFinished();
        
        wo.reopen();
        
        assertTrue( wo.isOpen() );
    }
    
	/**
	 * GIVEN: A work order in state OPEN 
	 * WHEN: reopening it 
	 * THEN: an IllegalStateException is thrown
	 */
    @Test
	void testReopenOpenWorkOrder() {
		WorkOrder wo = new WorkOrder(vehicle);

		assertThrows(IllegalStateException.class, () -> wo.reopen());
		assertTrue( wo.isOpen() );
	}
    
    /**
     * GIVEN: A work order in state ASSIGNED 
     * WHEN: reopening it 
     * THEN: an IllegalStateException is thrown
     */
    @Test
	void testReopenAssignedWorkOrder() {
		WorkOrder wo = new WorkOrder(vehicle);
		wo.assignTo(mechanic);

		assertThrows(IllegalStateException.class, () -> wo.reopen());
		assertTrue(wo.isAssigned());
	}
    
    /**
     * GIVEN: A work order in state INVOICED 
     * WHEN: reopening it 
     * THEN: an IllegalStateException is thrown
     */
    @Test
    void testReopenInvoicedWorkOrder() {
		WorkOrder wo = new WorkOrder(vehicle);
		wo.assignTo(mechanic);
		wo.markAsFinished();
		new Invoice(1000L, List.of(wo)); // wo is now invoiced

		assertThrows(IllegalStateException.class, () -> wo.reopen());
		assertTrue(wo.isInvoiced());
    }     
    
}